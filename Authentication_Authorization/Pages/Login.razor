@page "/login"
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager NavigationManager

<EditForm Model="tmpusr">
	<div class="row">
	<div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
		<div class="mb-3 text-center">
			<h3>LOGIN</h3>
		</div>
		<div class="mb-3">
			<label>User Name</label>
			<InputText @bind-Value="tmpusr.UserName" class="form-control" placeholder="User Name" />
		</div>
		<div class="mb-3">
			<label>Password</label>
			<InputText @bind-Value="tmpusr.Password" type="password" class="form-control" placeholder="User Name" />
		</div>
		<div class="mb-3 d-grid gap-2">
			<button @onclick="Authenticate" class="btn btn-primary">Login</button>
		</div>
	</div>
</div>
</EditForm>


@code {
	private class TempUser
	{
		public string UserName { get; set; }
		public string Password { get; set; }
	}

	private TempUser tmpusr = new TempUser();

	private async Task Authenticate()
	{
		var userAccount = userAccountService.GetByUserName(tmpusr.UserName);
		if(userAccount == null || userAccount.Password != tmpusr.Password)
		{
			await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
			return;
		}

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(new UserSession
			{
				UserName = userAccount.UserName,
				Role = userAccount.Role
			});
			NavigationManager.NavigateTo("/", true);

	}
}
